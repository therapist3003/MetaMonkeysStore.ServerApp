@page "/home"
@using MetaMonkeysStore.ServerApp.Data
@inject InvoiceService invoiceService
@inject CustomerService customerService

<div class="search-bars">
    <div class="text-center bg-blue-100">
        <input class="border-4 w-1/3 rounded m-6 p-6 h-8
               border-blue-300" type="text" placeholder="Search By Invoice No." @bind="searchInvoiceNumber"
               @bind:event="oninput" @onchange="SearchByInvoiceNo"/>
    </div>

    <div class="text-center bg-blue-100">
        <input class="border-4 w-1/3 rounded m-6 p-6 h-8
               border-blue-300" type="text" placeholder="Search By Customer Mobile" @bind="searchCustomerMobile"
               @bind:event="oninput" @onchange="SearchByCustomerMobile" />
    </div>
</div>

@if (!foundMatches.Any())
{
    <h1>@noMatchDisplay</h1>
}
else
{    
    // Displaying Radzen Grid
    <RadzenGrid AllowPaging="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" PageSize="4" AllowSorting="true" 
        Data="@foundMatches" TItem="TableEntry" ColumnWidth="100px">
        <Columns>
            @*Include column for serial number*@
            <RadzenGridColumn TItem="TableEntry" Property="invoice.InvoiceID" Title="Invoice ID"></RadzenGridColumn>
            <RadzenGridColumn TItem="TableEntry" Property="invoice.CustomerID" Title="Customer ID"></RadzenGridColumn>
            <RadzenGridColumn TItem="TableEntry" Property="customer.Name" Title="Customer Name"></RadzenGridColumn>
            <RadzenGridColumn TItem="TableEntry" Property="invoice.TotalAmount" Title="Bill value"></RadzenGridColumn>
            
        </Columns>
    </RadzenGrid>
}

@code {
    public string searchInvoiceNumber = null!;
    public string searchCustomerMobile = null!;

    public string noMatchDisplay = "No Matches Found !!";

    public List<TableEntry> foundMatches = new List<TableEntry>();

    public class TableEntry // Grouped two objects into one for ease while creating radzen grid
    {
        public Customer customer { get; set; }
        public Invoice invoice { get; set; }
    }

    private async Task SearchByInvoiceNo(ChangeEventArgs e) // Searching by invoice no. returns 1 match
    {
        foundMatches.Clear();
        Invoice searchInvoice = await invoiceService.GetInvoiceById(searchInvoiceNumber);

        if (searchInvoice == null)
        {
            return;
        }

        Customer invoicedCustomer = await customerService.GetCustomerById(searchInvoice.CustomerID);

        TableEntry foundMatch = new TableEntry{customer = invoicedCustomer, invoice = searchInvoice };
        foundMatches.Add(foundMatch);
        return;
    }

    private async Task SearchByCustomerMobile(ChangeEventArgs e) // Searching by customer mobile returns more than 1 match
    {
        foundMatches.Clear();
        Customer searchCustomer = await customerService.GetCustomerByPhone(searchCustomerMobile);

        if (searchCustomer == null)
        {
            return;
        }

        string customerID = searchCustomer.CustomerID;

        List<Invoice> foundMatch = await invoiceService.GetInvoiceByCustomerID(customerID);

        foreach (Invoice invoice in foundMatch)
        {
            TableEntry match = new TableEntry { customer = searchCustomer, invoice = invoice };
            foundMatches.Add(match);
        }
        return;
    }

    private void HiAsync(ChangeEventArgs e)
    {
        //searchInvoiceNumber = "aaaa";
        searchCustomerMobile = String.Concat(searchCustomerMobile, "95"); 
    }
}
