@page "/"
@using MetaMonkeysStore.ServerApp.Data
@inject EmployeeService employeeService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@using System.ComponentModel.DataAnnotations

<PageTitle>Login</PageTitle>

<div class="p-10">
    <EditForm Model="model" class="w-2/3 mx-auto">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
        <label for="employeeType">Employee Type</label><br />

        <InputRadioGroup id="employeeType" @bind-Value="@model.role" class="form-control">
            @foreach (var role in Roles)
            {
                <InputRadio Value="@role"></InputRadio>
                <span style="padding">
                    @role
                </span>
            }
        </InputRadioGroup>
        <ValidationMessage For="(() => model.role)"/>
        </div>

        <div class="my-3">
            <label>Username</label>
            <InputText class="border-2 rounded-sm py-3 px-4 w-full my-2"
                @bind-Value="model.userName"/>
                <ValidationMessage For="(() => model.userName)"/>
        </div>

        <div class="my-3">
            <label>Password</label>
            <InputText type="password" class="border-2 rounded-sm py-3 px-4 w-full my-2"
                       @bind-Value="model.password" />
            <ValidationMessage For="(() => model.password)" />
        </div>

        <div class="flex flex-row justify-end">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
        <br />
        New user ?
        <button @onclick="Register" class="btn btn-outline-primary">Register</button>
    </EditForm>
</div>

@code {
    private List<String> Roles => new List<String>
    {
        "User",
        "Admin"
    };

    private class Model
    {
        //[Required]
        public string userName;

        //[Required]
        public string password;

        //[Required]
        public string role;
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var employeeAccount = await employeeService.GetEmployeeByUsername(model.userName);

        if (employeeAccount == null || employeeAccount.Password != model.password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new EmployeeSession
            {
                UserName = employeeAccount.Username,
                Role = employeeAccount.Role

            });
        navManager.NavigateTo("/home", true);
    }

    private async Task Register()
    {
        navManager.NavigateTo("/register", true);
    }
}
 