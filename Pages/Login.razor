@page "/"
@using MetaMonkeysStore.ServerApp.Data
@inject EmployeeService employeeService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<EditForm Model="model">
    <div class="form-group">
        <label for="employeeType">Employee Type</label><br />

        <InputRadioGroup id="employeeType" @bind-Value="model.role" class="form-control">
            @foreach (var role in Roles)
            {
                <InputRadio Value="@role"></InputRadio>
                <span style="padding">
                    @role
                </span>
            }
        </InputRadioGroup>
    </div>

</EditForm>    

@*<div class="row">
    <div class="col-lg-4 offset-leg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>

        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.userName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <label>User Name</label>
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>  
    </div> 
</div>*@

<div class="flex-col">
    <h1>Login</h1>
    <EditForm Model="@model">
        <label>Username</label>
        <InputText @bind-Value="@model.userName"/><br />
        <label>Password</label>
        <InputText type="password" @bind-Value="@model.password"/>
    </EditForm>

    <button @onclick="Authenticate" class="btn btn-primary">Login</button>

    <p>New user ?</p>

    <button @onclick="Register" class="btn btn-outline-primary">Register</button>
</div>

@code {
    private EditContext editContext;

    private List<String> Roles => new List<String>
    {
        "User",
        "Admin"
    };

    private class Model
    {
        public string userName;
        public string password;
        public string role;
    }

    private Model model = new Model();

    protected override Task OnInitializedAsync()
    {
        editContext = new EditContext(model);
        return Task.CompletedTask;
    }

    private async Task Authenticate()
    {
        var employeeAccount = await employeeService.GetEmployeeByUsername(model.userName);

        if (employeeAccount == null || employeeAccount.Password != model.password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new EmployeeSession
            {
                UserName = employeeAccount.Username,
                Role = employeeAccount.Role

            });
        navManager.NavigateTo("/", true);
    }

    private async Task Register()
    {
        navManager.NavigateTo("/register", true);
    }
}
 